
> fluent-check@1.0.0 coverage
> nyc mocha -r ts-node/register -r source-map-support



  Arbitrary tests
    ✓ should return has many numbers has asked
    ✓ should return values in the specified range
    ✓ should return corner cases if there is space
    ✓ should return values smaller than what was shrunk (185ms)
    ✓ should allow shrinking of mapped arbitraries
    ✓ should allow shrinking of mapped tupples (316ms)
    Corner Cases
      ✓ should return the corner cases of integers
      ✓ should return the corner cases of booleans
      ✓ should return the corner cases of strings
      ✓ should return the corner cases of arrays/sets
      ✓ should return the corner cases of maps
      ✓ should return the corner cases of tuples
    Builders
      ✓ should return a constant for strings with no chars
      ✓ should return a constant for integers/reals with min == max
      ✓ should return empty for integers/reals with min > max
      ✓ should return empty for array/set with min > max
      ✓ should return the only arbitrary for unions with only one arbitrary
      ✓ should return no arbitrary for oneofs of no elements
    Transformations
      ✓ should allow booleans to be mappeable
      ✓ should allow integers to be filtered
      ✓ filters should exclude corner cases, even after shrinking
      ✓ should allow integers to be both mapped and filtered
    Sizes
      ✓ should return the correct size of shrinked integer arbitraries
      ✓ should return the correct size of a composite arbitrary
      ✓ should return the correct size of a collection arbitrary
      ✓ should return the correct size of a oneof arbitrary
      Statistics tests
        ✓ size should be exact for exact well-bounded integer arbitraries
        ✓ size should be exact for well-bounded mapped arbitraries
        ✓ size should be estimated for filtered arbitraries
        ✓ sampling should terminate even if arbitrary's size is potentially zero
    Filtered Arbitraries
      ✓ A filtered mapped filtered arbitrary is able to 
    Unique Arbitraries
      ✓ should return all the available values when sample size === size
      ✓ should return no more than the number of possible cases
      ✓ should return a unique sample with bias with corner cases
      ✓ should return a unique sample with bias even with a small sample
    Chained Arbitraries
      ✓ should allow the creation of array with size based on an integer arbitrary
      ✓ should check a property based on a chained arbitrary
    Can Generate
      ✓ knows if it can generate an integer
      ✓ knows if it can generate a string
      ✓ knows if it can generate a boolean
      ✓ knows if it can generate an array
      ✓ knows if it can be generated by a composite
      ✓ knows if it can be generated by a map
      ✓ knows if it can be generated by a filter
      ✓ knows if it can be generated by a set
      ✓ knows if it can be generated by a oneof
      ✓ knows if it can be generated by a constant
      ✓ knows if it can be generated by a tuple
    No Arbitrary
      ✓ should return size == 0
      ✓ should return an empty sample
      ✓ should remain no arbitrary when compose with map, and filter
      ✓ should always be satisfiable due to vacuous truth in universal assertions
      ✓ should never be satisfiable due to vacuous truth in existential assertions

  Boolean tests
    ✓ finds two true booleans
    ✓ finds that some booleans are false
    ✓ finds that self-XOR returns true
    ✓ finds implication using ORs

  Composite tests
    ✓ finds a string with length 5 in a composite
    ✓ finds no string with length 3 in a composite

  Generation tests
    ✓ The generator factory is working as expected
    ✓ Sampling two similar arbitraries with the same rng produces the same values
    ✓ Sampling two similar arbitraries with different rng produces different values
    ✓ Generator generates different values for two similar arbitraries without generator specification
    ✓ Generator generates different values for two similar arbitraries with generator specification
    ✓ Generator generates same values in two runs with the same seed
    ✓ Generator generates same values in two runs of the same scenario

  Integer tests
    ✓ finds there is a number in the -10, 10 range, which is neutral under addition for all integers.
    ✓ finds that there is an integer larger than any number in a range and shrinks it (172ms)
    ✓ finds a number that is divisible by 7 and shrinks it
    ✓ finds a number that is divisible by -13 and shrinks it
    ✓ finds that summing two positive numbers in a range nevers returns zero
    ✓ finds two elements such that a + b === 10
    ✓ finds that adding 1000 makes any number larger and shrinks the example
    ✓ finds two elements such that a % 11 == 0

  Math properties tests
    ✓ finds if addition is commutative
    ✓ finds if additions is associative
    ✓ finds if addition has an inverse
    ✓ finds if multiplication is commutative
    ✓ finds if multiplication is associative
    ✓ finds if multiplication is distributive over addition
    ✓ finds the neutral element of addition
    ✓ finds the neutral element of multiplication
    ✓ finds the absorbing element of multiplication
    ✓ finds that subtraction is not cummutative

  Nat tests
    ✓ should return a valid range if min < 0
    ✓ should return a NoArbitrary if max < 0 (496ms)

  Real-valued tests
    ✓ finds that there is a real larger than any number in a range and shrinks it (164ms)
    ✓ finds that multiplication has a zero element even in reals

  Reporter tests
    ✓ Passes a satisfiable property
    ✓ Returns error on an unsatisfiable property

  Stack tests
    ✓ should push one element to the stack and have size one
    ✓ should push several elements to the stack and have size equal to the number of pushed elements
    ✓ should find an example where pushing a collection of elements keeps the stack empty
    ✓ should find if two different stacks behave the same
    ✓ should check if after being pushed some elements, and then popped just one,it has size equal to the number of elements minus one

  Statistics tests
    IntegerDistribution default implementations
      ✓ calculates means correctly
      ✓ calculates modes correctly
      ✓ calculates cumulative probabilities correctly
      ✓ calculates inverse cumulative probabilities correctly
    Beta-binomial distribution
      ✓ defines the mean as a constant-time closed form expression
      ✓ defines the mode as a constant-time closed form expression
      ✓ defines a PDF consistent with its mean definition

  Strings tests
    ✓ finds that the length of the concatenation of string is the sum of the lengths (401ms)
    ✓ finds a string with length 5 in all strings
    ✓ finds any substring inside the string (74ms)


  105 passing (2s)

---------------------------|---------|----------|---------|---------|----------------------
File                       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s    
---------------------------|---------|----------|---------|---------|----------------------
All files                  |   55.95 |    29.33 |   71.94 |   77.55 |                      
 coverage                  |       0 |        0 |       0 |       0 |                      
  block-navigation.js      |       0 |        0 |       0 |       0 | 2-79                 
  prettify.js              |       0 |        0 |       0 |       0 | 2                    
  sorter.js                |       0 |        0 |       0 |       0 | 2-170                
 src                       |   79.82 |    82.98 |   72.73 |   81.18 |                      
  FluentCheck.ts           |   93.18 |    88.89 |   94.29 |   92.68 | 135-145              
  FluentReporter.ts        |     100 |      100 |     100 |     100 |                      
  index.ts                 |     100 |      100 |      80 |     100 |                      
  notebook.ts              |       0 |      100 |       0 |       0 | 8-26                 
  notebook2.ts             |       0 |        0 |       0 |       0 | 26-64                
  notebook3.ts             |       0 |      100 |       0 |       0 | 5-15                 
  notebook4.ts             |       0 |      100 |       0 |       0 | 15-21                
  notebook5.ts             |       0 |      100 |     100 |       0 | 1                    
  statistics.ts            |   90.48 |    92.86 |   72.22 |   89.13 | 72,74-75,86-87       
 src/arbitraries           |   67.82 |    54.21 |   60.66 |   68.48 |                      
  Arbitrary.ts             |   95.12 |    81.82 |      80 |   94.44 | 110,117              
  ArbitraryArray.ts        |   96.97 |       75 |   93.33 |    96.3 | 58                   
  ArbitraryBoolean.ts      |    87.5 |        0 |      80 |   85.71 | 9                    
  ArbitraryComposite.ts    |      92 |        0 |    87.5 |   88.89 | 41-42                
  ArbitraryConstant.ts     |   88.89 |        0 |   83.33 |   88.89 | 15                   
  ArbitraryInteger.ts      |   93.33 |    76.47 |   88.89 |   96.15 | 53                   
  ArbitraryReal.ts         |     100 |        0 |     100 |     100 | 4                    
  ArbitrarySet.ts          |   66.67 |     37.5 |   66.67 |      60 | 24-42,61             
  ArbitraryString.ts       |       0 |        0 |       0 |       0 | 6-11                 
  ArbitraryTuple.ts        |   94.44 |    88.89 |   85.71 |   93.55 | 69-70                
  BaseArbitrary.ts         |       0 |        0 |       0 |       0 | 8-53                 
  ChainedArbitrary.ts      |   83.33 |    33.33 |   71.43 |      80 | 21-25                
  FilteredArbitrary.ts     |   88.89 |    57.14 |      90 |   94.74 | 54                   
  MappedArbitrary.ts       |   93.75 |    71.43 |      90 |   92.31 | 40                   
  NoArbitrary.ts           |   61.54 |        0 |      60 |   66.67 | 5,11,13-14           
  UniqueArbitrary.ts       |       0 |        0 |       0 |       0 | 6-45                 
  WrappedArbitrary.ts      |   44.44 |        0 |   16.67 |   44.44 | 9-18                 
  index.ts                 |   97.92 |    85.29 |   71.43 |     100 | 24,30,51             
  internal.ts              |     100 |      100 |     100 |     100 |                      
  statistics.ts            |       0 |        0 |       0 |       0 | 23-103               
  string.ts                |   70.27 |    66.67 |   31.25 |   69.57 | 18,21,24,27-28,31-32 
  types.ts                 |     100 |      100 |     100 |     100 |                      
  util.ts                  |   40.63 |    36.36 |      40 |   57.14 | 27-29,38-41,51-52    
 src/strategies            |   85.96 |    73.33 |   68.75 |   85.96 |                      
  FluentStrategy.ts        |   77.78 |    66.67 |      40 |   77.78 | 57,85-101            
  FluentStrategyFactory.ts |   81.82 |      100 |      70 |   81.82 | 20-21,36-37          
  FluentStrategyMixins.ts  |     100 |       80 |   91.67 |     100 | 52                   
 test                      |   95.41 |       68 |   91.67 |    99.6 |                      
  arbitrary.test.ts        |   90.81 |    46.67 |   84.05 |   99.12 | 416,424              
  booleans.test.ts         |     100 |      100 |     100 |     100 |                      
  composite.test.ts        |     100 |      100 |     100 |     100 |                      
  generation.test.ts       |     100 |      100 |     100 |     100 |                      
  integers.test.ts         |     100 |      100 |     100 |     100 |                      
  math.test.ts             |     100 |      100 |     100 |     100 |                      
  nats.test.ts             |     100 |      100 |     100 |     100 |                      
  reals.test.ts            |     100 |      100 |     100 |     100 |                      
  reporter.test.ts         |     100 |      100 |     100 |     100 |                      
  stack.test.ts            |     100 |      100 |     100 |     100 |                      
  statistics.test.ts       |     100 |      100 |     100 |     100 |                      
  strings.test.ts          |     100 |      100 |     100 |     100 |                      
---------------------------|---------|----------|---------|---------|----------------------
